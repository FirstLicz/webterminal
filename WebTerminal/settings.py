"""
Django settings for WebTerminal project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 设置环境路径
sys.path.append(Path(BASE_DIR, 'apps').as_posix())
sys.path.append(BASE_DIR.as_posix())

# build binary file
GDAL_LIBRARY_PATH = r'C:\OSGeo4W64\bin'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0e5=gnb!v2me8gfmx4ftgvodh2q=^5__m$7+o-cxr+4g=^q^%6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'apps.chat',
    'apps.terminal',
    'rest_framework',
    'rest_framework.authtoken',  # 令牌认证
    'djcelery',  # django-celery
    'django_celery_results',    # 存储

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.common.middleware.CustomMiddleware',
]

ROOT_URLCONF = 'WebTerminal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [Path(BASE_DIR, "templates").as_posix()],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'WebTerminal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'TEST': {  # test database config
            'NAME': BASE_DIR / 'db_test.sqlite3',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# media 媒体文件管理
MEDIA_URL = '/media/'
MEDIA_ROOT = Path(BASE_DIR, "media").as_posix()
if not os.path.isdir(MEDIA_ROOT):
    os.makedirs(MEDIA_ROOT, exist_ok=True)

# static root 目录，用于生产 nginx 代理
if DEBUG:
    STATICFILES_DIRS = [
        ("css", Path(BASE_DIR, "static", "css").as_posix()),
        ("img", Path(BASE_DIR, "static", "img").as_posix()),
        ("js", Path(BASE_DIR, "static", "js").as_posix()),
        ("plugins", Path(BASE_DIR, "static", "plugins").as_posix()),
    ]
else:
    STATIC_ROOT = Path(BASE_DIR, "static").as_posix()

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Channels
ASGI_APPLICATION = "WebTerminal.asgi.application"

REDIS_HOST = '192.168.6.191'
REDIS_PORT = 6379

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

# LOGGING CONFIG
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname}-{asctime}-{module}-{process:d}-{lineno:d}:{message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname}:{message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        },
        'ssh_consumer': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',  # 'logging.FileHandler',
            'formatter': 'verbose',
            # 'filename': os.path.join(BASE_DIR, 'log', 'sshconsumer.log'),
            # 'encoding': 'utf-8',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        # 'django': {
        #     'handlers': ['console'],
        #     'level': "DEBUG",
        #     'propagate': False,
        # },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'default': {
            'handlers': ['console'],
            'level': "DEBUG",
            'propagate': False,
        },
        'test': {
            'handlers': ['console'],
            'level': "DEBUG",
            'propagate': False,
        },
    },
}

# 缓存配置
CACHES = {
    # "default": {
    #     "BACKEND": "django_redis.cache.RedisCache",
    #     "LOCATION": "redis://127.0.0.1:6379/1",
    #     "OPTIONS": {
    #         "CONNECTION_POOL_KWARGS": {"max_connections": 20},
    #         "PASSWORD": "password"
    #     }
    # }
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': Path(BASE_DIR, 'django_cache').as_posix(),
        'TIMEOUT': None,
        'OPTIONS': {
            'MAX_ENTRIES': 2000
        }
    }
}

# 全局变量控制 websocket 中线程对象
TERMINAL_SESSION_DICT = {}

# 浏览器 iframe
X_FRAME_OPTIONS = 'SAMEORIGIN'

# restful api
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  #
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

import datetime

# jwt的配置
JWT_AUTH = {
    'JWT_ENCODE_HANDLER': 'rest_framework_jwt.utils.jwt_encode_handler',
    'JWT_DECODE_HANDLER': 'rest_framework_jwt.utils.jwt_decode_handler',
    'JWT_PAYLOAD_HANDLER': 'rest_framework_jwt.utils.jwt_payload_handler',
    # 将payload丢到jwt_get_user_id_from_payload_handler中会的到一个userid
    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
        'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',
    # 可以配置非对称加密
    'JWT_PRIVATE_KEY': None,
    'JWT_PUBLIC_KEY': None,
    # 默认的key
    'JWT_SECRET_KEY': SECRET_KEY,
    # 过期时间默认为seconds=300
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),  # 过期时间，手动配置
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    # 刷新过期时间
    'JWT_ALLOW_REFRESH': False,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
}

# Celery Configuration Options
CELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}/1'  # Broker配置，使用Redis作为消息中间件
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}/2'  # BACKEND配置，这里使用redis
BROKER_URL = CELERY_RESULT_BACKEND  # transport url
# CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']  # 结果序列化方案
